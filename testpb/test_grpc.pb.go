// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: testpb/test.proto

package testpb

import (
	context "context"
	studentpb "github.com/Luiggy102/go-grpc-protobuf/studentpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TestService_GetTest_FullMethodName           = "/test.TestService/GetTest"
	TestService_SetTest_FullMethodName           = "/test.TestService/SetTest"
	TestService_SetQuestion_FullMethodName       = "/test.TestService/SetQuestion"
	TestService_EnrollStudent_FullMethodName     = "/test.TestService/EnrollStudent"
	TestService_GetStudentPerTest_FullMethodName = "/test.TestService/GetStudentPerTest"
	TestService_TakeTest_FullMethodName          = "/test.TestService/TakeTest"
)

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Test service
type TestServiceClient interface {
	// unary rpc
	GetTest(ctx context.Context, in *GetTestRequest, opts ...grpc.CallOption) (*Test, error)
	SetTest(ctx context.Context, in *Test, opts ...grpc.CallOption) (*SetTestResponse, error)
	// client streaming
	SetQuestion(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Question, SetQuestionResponse], error)
	EnrollStudent(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[EnrollmentRequest, SetQuestionResponse], error)
	// server streaming
	GetStudentPerTest(ctx context.Context, in *GetStudentPerTestRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[studentpb.Student], error)
	// bidirectional streaming
	TakeTest(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TakeTestRequest, Question], error)
}

type testServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestServiceClient(cc grpc.ClientConnInterface) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) GetTest(ctx context.Context, in *GetTestRequest, opts ...grpc.CallOption) (*Test, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Test)
	err := c.cc.Invoke(ctx, TestService_GetTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) SetTest(ctx context.Context, in *Test, opts ...grpc.CallOption) (*SetTestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTestResponse)
	err := c.cc.Invoke(ctx, TestService_SetTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) SetQuestion(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Question, SetQuestionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[0], TestService_SetQuestion_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Question, SetQuestionResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TestService_SetQuestionClient = grpc.ClientStreamingClient[Question, SetQuestionResponse]

func (c *testServiceClient) EnrollStudent(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[EnrollmentRequest, SetQuestionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[1], TestService_EnrollStudent_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EnrollmentRequest, SetQuestionResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TestService_EnrollStudentClient = grpc.ClientStreamingClient[EnrollmentRequest, SetQuestionResponse]

func (c *testServiceClient) GetStudentPerTest(ctx context.Context, in *GetStudentPerTestRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[studentpb.Student], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[2], TestService_GetStudentPerTest_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetStudentPerTestRequest, studentpb.Student]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TestService_GetStudentPerTestClient = grpc.ServerStreamingClient[studentpb.Student]

func (c *testServiceClient) TakeTest(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TakeTestRequest, Question], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[3], TestService_TakeTest_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TakeTestRequest, Question]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TestService_TakeTestClient = grpc.BidiStreamingClient[TakeTestRequest, Question]

// TestServiceServer is the server API for TestService service.
// All implementations must embed UnimplementedTestServiceServer
// for forward compatibility.
//
// Test service
type TestServiceServer interface {
	// unary rpc
	GetTest(context.Context, *GetTestRequest) (*Test, error)
	SetTest(context.Context, *Test) (*SetTestResponse, error)
	// client streaming
	SetQuestion(grpc.ClientStreamingServer[Question, SetQuestionResponse]) error
	EnrollStudent(grpc.ClientStreamingServer[EnrollmentRequest, SetQuestionResponse]) error
	// server streaming
	GetStudentPerTest(*GetStudentPerTestRequest, grpc.ServerStreamingServer[studentpb.Student]) error
	// bidirectional streaming
	TakeTest(grpc.BidiStreamingServer[TakeTestRequest, Question]) error
	mustEmbedUnimplementedTestServiceServer()
}

// UnimplementedTestServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTestServiceServer struct{}

func (UnimplementedTestServiceServer) GetTest(context.Context, *GetTestRequest) (*Test, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTest not implemented")
}
func (UnimplementedTestServiceServer) SetTest(context.Context, *Test) (*SetTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTest not implemented")
}
func (UnimplementedTestServiceServer) SetQuestion(grpc.ClientStreamingServer[Question, SetQuestionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SetQuestion not implemented")
}
func (UnimplementedTestServiceServer) EnrollStudent(grpc.ClientStreamingServer[EnrollmentRequest, SetQuestionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method EnrollStudent not implemented")
}
func (UnimplementedTestServiceServer) GetStudentPerTest(*GetStudentPerTestRequest, grpc.ServerStreamingServer[studentpb.Student]) error {
	return status.Errorf(codes.Unimplemented, "method GetStudentPerTest not implemented")
}
func (UnimplementedTestServiceServer) TakeTest(grpc.BidiStreamingServer[TakeTestRequest, Question]) error {
	return status.Errorf(codes.Unimplemented, "method TakeTest not implemented")
}
func (UnimplementedTestServiceServer) mustEmbedUnimplementedTestServiceServer() {}
func (UnimplementedTestServiceServer) testEmbeddedByValue()                     {}

// UnsafeTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServiceServer will
// result in compilation errors.
type UnsafeTestServiceServer interface {
	mustEmbedUnimplementedTestServiceServer()
}

func RegisterTestServiceServer(s grpc.ServiceRegistrar, srv TestServiceServer) {
	// If the following call pancis, it indicates UnimplementedTestServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TestService_ServiceDesc, srv)
}

func _TestService_GetTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).GetTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_GetTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).GetTest(ctx, req.(*GetTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_SetTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Test)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).SetTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_SetTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).SetTest(ctx, req.(*Test))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_SetQuestion_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).SetQuestion(&grpc.GenericServerStream[Question, SetQuestionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TestService_SetQuestionServer = grpc.ClientStreamingServer[Question, SetQuestionResponse]

func _TestService_EnrollStudent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).EnrollStudent(&grpc.GenericServerStream[EnrollmentRequest, SetQuestionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TestService_EnrollStudentServer = grpc.ClientStreamingServer[EnrollmentRequest, SetQuestionResponse]

func _TestService_GetStudentPerTest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetStudentPerTestRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServiceServer).GetStudentPerTest(m, &grpc.GenericServerStream[GetStudentPerTestRequest, studentpb.Student]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TestService_GetStudentPerTestServer = grpc.ServerStreamingServer[studentpb.Student]

func _TestService_TakeTest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).TakeTest(&grpc.GenericServerStream[TakeTestRequest, Question]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TestService_TakeTestServer = grpc.BidiStreamingServer[TakeTestRequest, Question]

// TestService_ServiceDesc is the grpc.ServiceDesc for TestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTest",
			Handler:    _TestService_GetTest_Handler,
		},
		{
			MethodName: "SetTest",
			Handler:    _TestService_SetTest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SetQuestion",
			Handler:       _TestService_SetQuestion_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "EnrollStudent",
			Handler:       _TestService_EnrollStudent_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetStudentPerTest",
			Handler:       _TestService_GetStudentPerTest_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TakeTest",
			Handler:       _TestService_TakeTest_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "testpb/test.proto",
}
